<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
 	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd 
	http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-2.0.xsd">

<!-- 

Spring configuration of application components.

This variant:
	Wiring command service for direct database access using hibernate on Verinice-Server.
	Includes authentication service.

-->

<!-- BEGIN Server settings ========================================================================= -->

<!-- Server configuration properties and initialization -->
<bean 
	id="configuration" 
	class="sernet.gs.server.ServerConfiguration"
>
	<property name="properties"><props>
		
		<prop key="grundschutzKataloge">
			it-grundschutz2008_html_de.zip
		</prop>
		
		<prop key="datenschutzBaustein">
			B1.5-Datenschutz-2008-08-26.zip
		</prop>
	
	</props></property>
	
</bean>

<bean 
	id="serverInitializer" 
	class="sernet.gs.server.ServerInitializer"
	init-method="initialize">
	<property name="configuration" ref="configuration"/>
</bean>

<bean
	id="serverCommandService"
	class="sernet.gs.ui.rcp.main.service.ServerCommandService">
	<property name="commandService" ref="commandService" />
</bean>


<!-- Use existing hibernate config for session -->  
<bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean" >
  <property name="configLocation">
    <value>classpath:/server_hibernate.cfg.xml</value>
  </property>
</bean>

<!-- END Server settings =========================================================================== -->
   

<!-- BEGIN dao definitions ========================================================================= -->

	<!-- Instance of generic hibernate DAO for class Property -->  
	<bean id="propertyListDao" class="sernet.gs.ui.rcp.main.connect.HibernateBaseDao">
		<constructor-arg>
			<value>sernet.hui.common.connect.PropertyList</value>
		</constructor-arg>
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	
	<!-- Instance of generic hibernate DAO for class Entity -->  
	<bean id="entityDao" class="sernet.gs.ui.rcp.main.connect.HibernateBaseDao">
		<constructor-arg>
			<value>sernet.hui.common.connect.Entity</value>
		</constructor-arg>
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	
	<bean id="gefaehrdungDao" class="sernet.gs.ui.rcp.main.connect.HibernateBaseDao">
		<constructor-arg>
			<value>sernet.gs.model.Gefaehrdung</value>
		</constructor-arg>
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	
	<bean id="ownGefaehrdungDao" class="sernet.gs.ui.rcp.main.connect.HibernateBaseDao">
		<constructor-arg>
			<value>sernet.gs.ui.rcp.main.bsi.risikoanalyse.model.OwnGefaehrdung</value>
		</constructor-arg>
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	
	<bean id="configurationDao" class="sernet.gs.ui.rcp.main.connect.HibernateBaseDao">
		<constructor-arg>
			<value>sernet.gs.ui.rcp.main.common.model.configuration.Configuration</value>
		</constructor-arg>
		<property name="sessionFactory" ref="sessionFactory"/>
		
		<security:intercept-methods>
		<security:protect
			method="sernet.gs.ui.rcp.main.connect.HibernateBaseDao.*" access="ROLE_USER" />
		</security:intercept-methods>
	</bean>
	
	
<bean id="bausteinVorschlagDAO" class="sernet.gs.ui.rcp.main.connect.HibernateBaseDao">
    <constructor-arg>
        <value>sernet.gs.ui.rcp.main.bsi.model.BausteinVorschlag</value>
    </constructor-arg>
    <property name="sessionFactory" ref="sessionFactory"/>
</bean>
	
<!-- business object Dao definitions follow ================================================================== -->	
	
<bean id="anwendungDAO" class="sernet.gs.ui.rcp.main.connect.HibernateBaseDao">
    <constructor-arg>
        <value>sernet.gs.ui.rcp.main.bsi.model.Anwendung</value>
    </constructor-arg>
    <property name="sessionFactory" ref="sessionFactory"/>
</bean>

<bean id="anwendungenKategorieDAO" class="sernet.gs.ui.rcp.main.connect.HibernateBaseDao">
    <constructor-arg>
        <value>sernet.gs.ui.rcp.main.bsi.model.AnwendungenKategorie</value>
    </constructor-arg>
    <property name="sessionFactory" ref="sessionFactory"/>
</bean>


<bean id="bausteinUmsetzungDAO" class="sernet.gs.ui.rcp.main.connect.HibernateBaseDao">
    <constructor-arg>
        <value>sernet.gs.ui.rcp.main.bsi.model.BausteinUmsetzung</value>
    </constructor-arg>
    <property name="sessionFactory" ref="sessionFactory"/>
</bean>


<bean id="bausteinVorschlagDao" class="sernet.gs.ui.rcp.main.connect.HibernateBaseDao">
    <constructor-arg>
        <value>sernet.gs.ui.rcp.main.bsi.model.BausteinVorschlag</value>
    </constructor-arg>
    <property name="sessionFactory" ref="sessionFactory"/>
</bean>


<bean id="BSIModelDAO" class="sernet.gs.ui.rcp.main.connect.HibernateBaseDao">
    <constructor-arg>
        <value>sernet.gs.ui.rcp.main.bsi.model.BSIModel</value>
    </constructor-arg>
    <property name="sessionFactory" ref="sessionFactory"/>
</bean>


<bean id="clientDAO" class="sernet.gs.ui.rcp.main.connect.HibernateBaseDao">
    <constructor-arg>
        <value>sernet.gs.ui.rcp.main.bsi.model.Client</value>
    </constructor-arg>
    <property name="sessionFactory" ref="sessionFactory"/>
</bean>


<bean id="clientsKategorieDAO" class="sernet.gs.ui.rcp.main.connect.HibernateBaseDao">
    <constructor-arg>
        <value>sernet.gs.ui.rcp.main.bsi.model.ClientsKategorie</value>
    </constructor-arg>
    <property name="sessionFactory" ref="sessionFactory"/>
</bean>


<bean id="datenverarbeitungDAO" class="sernet.gs.ui.rcp.main.connect.HibernateBaseDao">
    <constructor-arg>
        <value>sernet.gs.ui.rcp.main.ds.model.Datenverarbeitung</value>
    </constructor-arg>
    <property name="sessionFactory" ref="sessionFactory"/>
</bean>


<bean id="finishedRiskAnalysisDAO" class="sernet.gs.ui.rcp.main.connect.HibernateBaseDao">
    <constructor-arg>
        <value>sernet.gs.ui.rcp.main.bsi.risikoanalyse.model.FinishedRiskAnalysis</value>
    </constructor-arg>
    <property name="sessionFactory" ref="sessionFactory"/>
</bean>


<bean id="gebaeudeDAO" class="sernet.gs.ui.rcp.main.connect.HibernateBaseDao">
    <constructor-arg>
        <value>sernet.gs.ui.rcp.main.bsi.model.Gebaeude</value>
    </constructor-arg>
    <property name="sessionFactory" ref="sessionFactory"/>
</bean>


<bean id="gebaeudeKategorieDAO" class="sernet.gs.ui.rcp.main.connect.HibernateBaseDao">
    <constructor-arg>
        <value>sernet.gs.ui.rcp.main.bsi.model.GebaeudeKategorie</value>
    </constructor-arg>
    <property name="sessionFactory" ref="sessionFactory"/>
</bean>


<bean id="gefaehrdungsUmsetzungDAO" class="sernet.gs.ui.rcp.main.connect.HibernateBaseDao">
    <constructor-arg>
        <value>sernet.gs.ui.rcp.main.bsi.risikoanalyse.model.GefaehrdungsUmsetzung</value>
    </constructor-arg>
    <property name="sessionFactory" ref="sessionFactory"/>
</bean>


<bean id="ITVerbundDAO" class="sernet.gs.ui.rcp.main.connect.HibernateBaseDao">
    <constructor-arg>
        <value>sernet.gs.ui.rcp.main.bsi.model.ITVerbund</value>
    </constructor-arg>
    <property name="sessionFactory" ref="sessionFactory"/>
</bean>


<bean id="massnahmenUmsetzungDAO" class="sernet.gs.ui.rcp.main.connect.HibernateBaseDao">
    <constructor-arg>
        <value>sernet.gs.ui.rcp.main.bsi.model.MassnahmenUmsetzung</value>
    </constructor-arg>
    <property name="sessionFactory" ref="sessionFactory"/>
</bean>


<bean id="netzKomponenteDAO" class="sernet.gs.ui.rcp.main.connect.HibernateBaseDao">
    <constructor-arg>
        <value>sernet.gs.ui.rcp.main.bsi.model.NetzKomponente</value>
    </constructor-arg>
    <property name="sessionFactory" ref="sessionFactory"/>
</bean>


<bean id="NKKategorieDAO" class="sernet.gs.ui.rcp.main.connect.HibernateBaseDao">
    <constructor-arg>
        <value>sernet.gs.ui.rcp.main.bsi.model.NKKategorie</value>
    </constructor-arg>
    <property name="sessionFactory" ref="sessionFactory"/>
</bean>


<bean id="personDAO" class="sernet.gs.ui.rcp.main.connect.HibernateBaseDao">
    <constructor-arg>
        <value>sernet.gs.ui.rcp.main.bsi.model.Person</value>
    </constructor-arg>
    <property name="sessionFactory" ref="sessionFactory"/>
</bean>


<bean id="personengruppenDAO" class="sernet.gs.ui.rcp.main.connect.HibernateBaseDao">
    <constructor-arg>
        <value>sernet.gs.ui.rcp.main.ds.model.Personengruppen</value>
    </constructor-arg>
    <property name="sessionFactory" ref="sessionFactory"/>
</bean>


<bean id="personenKategorieDAO" class="sernet.gs.ui.rcp.main.connect.HibernateBaseDao">
    <constructor-arg>
        <value>sernet.gs.ui.rcp.main.bsi.model.PersonenKategorie</value>
    </constructor-arg>
    <property name="sessionFactory" ref="sessionFactory"/>
</bean>


<bean id="raeumeKategorieDAO" class="sernet.gs.ui.rcp.main.connect.HibernateBaseDao">
    <constructor-arg>
        <value>sernet.gs.ui.rcp.main.bsi.model.RaeumeKategorie</value>
    </constructor-arg>
    <property name="sessionFactory" ref="sessionFactory"/>
</bean>


<bean id="raumDAO" class="sernet.gs.ui.rcp.main.connect.HibernateBaseDao">
    <constructor-arg>
        <value>sernet.gs.ui.rcp.main.bsi.model.Raum</value>
    </constructor-arg>
    <property name="sessionFactory" ref="sessionFactory"/>
</bean>


<bean id="serverDAO" class="sernet.gs.ui.rcp.main.connect.HibernateBaseDao">
    <constructor-arg>
        <value>sernet.gs.ui.rcp.main.bsi.model.Server</value>
    </constructor-arg>
    <property name="sessionFactory" ref="sessionFactory"/>
</bean>


<bean id="serverKategorieDAO" class="sernet.gs.ui.rcp.main.connect.HibernateBaseDao">
    <constructor-arg>
        <value>sernet.gs.ui.rcp.main.bsi.model.ServerKategorie</value>
    </constructor-arg>
    <property name="sessionFactory" ref="sessionFactory"/>
</bean>


<bean id="sonstigeITKategorieDAO" class="sernet.gs.ui.rcp.main.connect.HibernateBaseDao">
    <constructor-arg>
        <value>sernet.gs.ui.rcp.main.bsi.model.SonstigeITKategorie</value>
    </constructor-arg>
    <property name="sessionFactory" ref="sessionFactory"/>
</bean>


<bean id="sonstITDAO" class="sernet.gs.ui.rcp.main.connect.HibernateBaseDao">
    <constructor-arg>
        <value>sernet.gs.ui.rcp.main.bsi.model.SonstIT</value>
    </constructor-arg>
    <property name="sessionFactory" ref="sessionFactory"/>
</bean>


<bean id="stellungnahmeDSBDAO" class="sernet.gs.ui.rcp.main.connect.HibernateBaseDao">
    <constructor-arg>
        <value>sernet.gs.ui.rcp.main.ds.model.StellungnahmeDSB</value>
    </constructor-arg>
    <property name="sessionFactory" ref="sessionFactory"/>
</bean>


<bean id="telefonKomponenteDAO" class="sernet.gs.ui.rcp.main.connect.HibernateBaseDao">
    <constructor-arg>
        <value>sernet.gs.ui.rcp.main.bsi.model.TelefonKomponente</value>
    </constructor-arg>
    <property name="sessionFactory" ref="sessionFactory"/>
</bean>


<bean id="TKKategorieDAO" class="sernet.gs.ui.rcp.main.connect.HibernateBaseDao">
    <constructor-arg>
        <value>sernet.gs.ui.rcp.main.bsi.model.TKKategorie</value>
    </constructor-arg>
    <property name="sessionFactory" ref="sessionFactory"/>
</bean>


<bean id="verantwortlicheStelleDAO" class="sernet.gs.ui.rcp.main.connect.HibernateBaseDao">
    <constructor-arg>
        <value>sernet.gs.ui.rcp.main.ds.model.VerantwortlicheStelle</value>
    </constructor-arg>
    <property name="sessionFactory" ref="sessionFactory"/>
</bean>


<bean id="verarbeitungsangabenDAO" class="sernet.gs.ui.rcp.main.connect.HibernateBaseDao">
    <constructor-arg>
        <value>sernet.gs.ui.rcp.main.ds.model.Verarbeitungsangaben</value>
    </constructor-arg>
    <property name="sessionFactory" ref="sessionFactory"/>
</bean>


<bean id="zweckbestimmungDAO" class="sernet.gs.ui.rcp.main.connect.HibernateBaseDao">
    <constructor-arg>
        <value>sernet.gs.ui.rcp.main.ds.model.Zweckbestimmung</value>
    </constructor-arg>
    <property name="sessionFactory" ref="sessionFactory"/>
</bean>


<bean id="risikoMassnahmeDAO" class="sernet.gs.ui.rcp.main.connect.HibernateBaseDao">
    <constructor-arg>
        <value>sernet.gs.ui.rcp.main.bsi.risikoanalyse.model.RisikoMassnahme</value>
    </constructor-arg>
    <property name="sessionFactory" ref="sessionFactory"/>
</bean>

<bean id="ownGefaehrdungDAO" class="sernet.gs.ui.rcp.main.connect.HibernateBaseDao">
    <constructor-arg>
        <value>sernet.gs.ui.rcp.main.bsi.risikoanalyse.model.OwnGefaehrdung</value>
    </constructor-arg>
    <property name="sessionFactory" ref="sessionFactory"/>
</bean>



	<bean id="cnaLinkDao" class="sernet.gs.ui.rcp.main.connect.HibernateBaseDao">
		<constructor-arg>
			<value>sernet.gs.ui.rcp.main.common.model.CnALink</value>
		</constructor-arg>
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>


<bean id="finishedRiskAnalysisListsDAO" class="sernet.gs.ui.rcp.main.connect.HibernateBaseDao">
    <constructor-arg>
        <value>sernet.gs.ui.rcp.main.bsi.risikoanalyse.model.FinishedRiskAnalysisLists</value>
    </constructor-arg>
    <property name="sessionFactory" ref="sessionFactory"/>
</bean>


<!-- END dao definitions ============================================================================ -->


	<bean id="daoFactory" class="sernet.gs.ui.rcp.main.service.DAOFactory">
		<property name="propertyListDao" ref="propertyListDao"/>
	  	<property name="entityDao" ref="entityDao"/>
	  	<property name="cnaLinkDao" ref="cnaLinkDao"/>
	  	<property name="finishedRiskAnalysisListsDAO" ref="finishedRiskAnalysisListsDAO"/>
	  	<property name="gefaehrdungDao" ref="gefaehrdungDao"/>
	  	<property name="ownGefaehrdungDao" ref="ownGefaehrdungDao"/>
	  	<property name="configurationDao" ref="configurationDao"/>
	  	<property name="bausteinVorschlagDao" ref="bausteinVorschlagDao"/>
	  	

		<!-- DAOs for subclasses of CnATreeElement: -->	  	
	  	<property name="anwendungDAO" ref="anwendungDAO"/>
	  	<property name="anwendungenKategorieDAO" ref="anwendungenKategorieDAO"/>
		<property name="bausteinUmsetzungDAO" ref="bausteinUmsetzungDAO"/>
		<property name="BSIModelDAO" ref="BSIModelDAO"/>
		<property name="clientDAO" ref="clientDAO"/>
		<property name="clientsKategorieDAO" ref="clientsKategorieDAO"/>
		<property name="datenverarbeitungDAO" ref="datenverarbeitungDAO"/>
		<property name="finishedRiskAnalysisDAO" ref="finishedRiskAnalysisDAO"/>
		<property name="gebaeudeDAO" ref="gebaeudeDAO"/>
		<property name="gebaeudeKategorieDAO" ref="gebaeudeKategorieDAO"/>
		<property name="gefaehrdungsUmsetzungDAO" ref="gefaehrdungsUmsetzungDAO"/>
		<property name="ITVerbundDAO" ref="ITVerbundDAO"/>
		<property name="massnahmenUmsetzungDAO" ref="massnahmenUmsetzungDAO"/>
		<property name="netzKomponenteDAO" ref="netzKomponenteDAO"/>
		<property name="NKKategorieDAO" ref="NKKategorieDAO"/>
		<property name="personDAO" ref="personDAO"/>
		<property name="personengruppenDAO" ref="personengruppenDAO"/>
		<property name="personenKategorieDAO" ref="personenKategorieDAO"/>
		<property name="raeumeKategorieDAO" ref="raeumeKategorieDAO"/>
		<property name="raumDAO" ref="raumDAO"/>
		<property name="serverDAO" ref="serverDAO"/>
		<property name="serverKategorieDAO" ref="serverKategorieDAO"/>
		<property name="sonstigeITKategorieDAO" ref="sonstigeITKategorieDAO"/>
		<property name="sonstITDAO" ref="sonstITDAO"/>
		<property name="stellungnahmeDSBDAO" ref="stellungnahmeDSBDAO"/>
		<property name="telefonKomponenteDAO" ref="telefonKomponenteDAO"/>
		<property name="TKKategorieDAO" ref="TKKategorieDAO"/>
		<property name="verantwortlicheStelleDAO" ref="verantwortlicheStelleDAO"/>
		<property name="verarbeitungsangabenDAO" ref="verarbeitungsangabenDAO"/>
		<property name="zweckbestimmungDAO" ref="zweckbestimmungDAO"/>
		<property name="risikoMassnahmeDAO" ref="risikoMassnahmeDAO"/>
		<property name="ownGefaehrdungDAO" ref="ownGefaehrdungDAO"/>
	  
  	</bean>
  	
	<bean id="txManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
    <property name="sessionFactory">
        <ref bean="sessionFactory" />
    </property>
</bean>

<bean id="baseTxProxy" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean" 
	abstract="true">
  <property name="transactionManager" ref="txManager"/>
  <property name="transactionAttributes">
    <props>
    	<prop key="get*">PROPAGATION_SUPPORTS,readOnly</prop>
    	<prop key="*">PROPAGATION_REQUIRED</prop>
    </props>
  </property>
</bean>

<bean id="serverExceptionHandler" class="sernet.gs.server.ServerExceptionHandler"/>

<bean id="commandService" parent="baseTxProxy">
  <property name="target">
    <bean 
    	class="sernet.gs.ui.rcp.main.service.HibernateCommandService"
    >
        <property name="daoFactory" ref="daoFactory"/>
        <property name="exceptionHandler" ref="serverExceptionHandler" />
        <property name="authService" ref="authService"/>
    </bean>
  </property>
  <property name="transactionAttributes">
      <props merge="true">
          <prop key="executeCommand">PROPAGATION_REQUIRED</prop> 
      </props>
  </property>
</bean>

<!-- BEGIN Security configuration ============================================================================ -->

<!-- service to allow application access to currently active roles, server realm etc.-->
<bean id="authService" class="sernet.gs.server.security.AuthenticationService">
	<property name="entryPoint" ref="digestProcessingFilterEntryPoint"/>

	<security:intercept-methods>
	<!-- must be logged in to access roles: -->
	<security:protect
		method="sernet.gs.server.security.AuthenticationService.getRoles" access="ROLE_USER" />
	<!-- must be logged in as admin to change passwords: -->
	<security:protect
		method="sernet.gs.server.security.AuthenticationService.hashPassword" access="ROLE_ADMIN" />
	</security:intercept-methods>
</bean>

<!-- the following beans enable http digest authentication and role based access -->

<security:authentication-manager alias="authenticationManager" />

<!-- 
	 Instead of digest auth, the authentication method can be switched, i.e. to basic auth over SSL with SHA hashes.
	 LDAP binding or LDAP password comparison are also possible, you'll have to change the authentication providers
	 and the hashing algorithm.
	 Please refer to the Spring framework security documentation for instructions on how to do this 
	 (http://static.springsource.org/spring-security/site/suggested.html).
 -->
<bean id="digestProcessingFilter"
	class="org.springframework.security.ui.digestauth.DigestProcessingFilter">
	<property name="userDetailsService" ref="uds" />
	<property name="authenticationEntryPoint"
			ref="digestProcessingFilterEntryPoint" />
	<property name="passwordAlreadyEncoded" value="true"/>
</bean>

<!-- 
	Configure your HTTP digest realm and nonce key here.
	If you don't know what this is: the realm is used to salt user passwords and for authentication
	and should be a value unique to your server. It will be visible to clients, so they know 
	for what service they are authenticating. It makes sense to include your company name
	or similar in the realm.
	The nonce key is used to create temporary session keys between server and client. It should
	be a value unique to your server and preferably be kept secret. It will not be visible
	to any client.
	If you are really paranoid, decrease the validity of the nonce key (i.e. to 5 seconds).
	If you are concerned about performance, increase the value of the nonce key (i.e. to 60 seconds).
 -->
<bean id="digestProcessingFilterEntryPoint"
	class="org.springframework.security.ui.digestauth.DigestProcessingFilterEntryPoint">
	<property name="realmName" value="Verinice Server Default - CHANGETHIS" />
	<property name="key" value="mysecretkey-CHANGETHIS" />
	<property name="nonceValiditySeconds" value="10" />
</bean>

<bean id="springSecurityFilterChain"
	class="org.springframework.security.util.FilterChainProxy">
	<security:filter-chain-map path-type="ant">
		<security:filter-chain pattern="/service/**"
			filters="httpSessionContextIntegrationFilter,digestProcessingFilter,exceptionTranslationFilter,filterSecurityInterceptor" />
	</security:filter-chain-map>
</bean>

<bean id="httpSessionContextIntegrationFilter"
	class="org.springframework.security.context.HttpSessionContextIntegrationFilter" />

<bean id="filterSecurityInterceptor"
	class="org.springframework.security.intercept.web.FilterSecurityInterceptor">
	
	<property name="authenticationManager"
		ref="authenticationManager" />
	
	<property name="accessDecisionManager"
		ref="accessDecisionManager" />
	
	<property name="objectDefinitionSource">
		<security:filter-invocation-definition-source>
			<security:intercept-url pattern="/service/**"
				access="ROLE_USER" />
		</security:filter-invocation-definition-source>
	</property>
</bean>

<bean id="accessDecisionManager"
	class="org.springframework.security.vote.AffirmativeBased">
	<property name="allowIfAllAbstainDecisions" value="false" />
	<property name="decisionVoters">
		<list>
			<bean class="org.springframework.security.vote.RoleVoter" />
		</list>
	</property>
</bean>

<bean id="exceptionTranslationFilter"
	class="org.springframework.security.ui.ExceptionTranslationFilter">
	<property name="authenticationEntryPoint"
	ref="digestProcessingFilterEntryPoint" />
</bean>

<security:authentication-provider  
	user-service-ref="uds">
</security:authentication-provider>

<bean id="uds" class="sernet.gs.server.security.DbUserDetailsService">
	<property name="commandService" ref="commandService"/>

	<property name="adminuser">
		<value>admin</value>
	</property>

	<!--
		The password entered here must be in the form of a HTTP digest "A1" hash.
		To create one using htdigest, type: "htdigest -c hash.txt <realm> <user>"
		Options:
		<realm>: the same realm configured as entry point (see above), i.e. "VeriniceServer"
		<user>: the adminuser name given above, i.e. "admin" 
		Copy the hash you find in hash.txt as value below.
	 -->
	<property name="adminpass">
		<value>67c37ffc1142482374f5af97defac40b</value>
	</property>
</bean>

<!-- END Security configuration ============================================================================ -->

</beans>
