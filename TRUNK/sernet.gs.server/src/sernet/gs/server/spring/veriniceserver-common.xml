<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd">

<!--
	All configuration options for the verinice server are available in the
	veriniceserver-plain.properties .
	
	(Note: The OSGi-based internal server does not need manual configuration.)
 -->
        
<!--
Spring configuration of application components.

This variant:
	Wiring command service for direct database access using hibernate on veriniceserver.

-->

<!-- BEGIN Server settings ========================================================================= -->

<bean 
	id="serverInitializer" 
	class="sernet.gs.server.ServerInitializer"
	init-method="initialize">
	<property name="workObjects" ref="workObjects"/>
	<property name="hibernateCommandService" ref="hibernateCommandService"/>
</bean>

<!-- Server configuration properties and initialization -->

<!--
	The following section initializes beans which are needed by the
 	commands (e.g. LoadBausteine et al) as well as various other classes.
 	
 	The beans are configured for use in the verinice server (the client
 	uses the same classes but in a different configuration) and are made
 	available via the VeriniceContext class (look it up for further details).
 -->
 
<bean
	id="gsScraperUtil"
	class="sernet.gs.ui.rcp.main.bsi.model.GSScraperUtil">
	<property name="model">
		<bean
		class="sernet.gs.ui.rcp.main.bsi.model.BSIMassnahmenModel">
			<constructor-arg>
				<bean 
					class="sernet.gs.ui.rcp.main.connect.BSIConfigurationServer">
					<property name="grundschutzKataloge" value="${veriniceserver.grundschutzKataloge}"/>
					<property name="datenschutzBaustein" value="${veriniceserver.datenschutzBaustein}"/>
				</bean>
			</constructor-arg>
		</bean>
	</property>
</bean>

<bean id="huiTypeFactory"
	class="sernet.hui.common.connect.HUITypeFactory">
 		<constructor-arg value="${snca.resource}"/> 
</bean>

<bean
	id="hitroUtil"
	class="sernet.gs.ui.rcp.main.common.model.HitroUtil"
	init-method="initForServer">
	<property name="typeFactory" ref="huiTypeFactory"/>
</bean> 

<bean id="workObjects" class="sernet.hui.common.VeriniceContext$State">
	<property name="map">
		<map>
			<entry key="gsScraperUtil" value-ref="gsScraperUtil"/>
			<entry key="hitroUtil" value-ref="hitroUtil"/>
			<entry key="huiTypeFactory" value-ref="huiTypeFactory"/>
			<entry key="commandService" value-ref="commandService"/>
			<entry key="authService" value-ref="authService"/>
		</map>
	</property>
</bean>

<bean id="dataSource"
   class="com.mchange.v2.c3p0.ComboPooledDataSource">
   <property name="driverClass" value="${jdbc.driverClass}" />
   <property name="jdbcUrl" value="${jdbc.url}" />
   <property name="user" value="${jdbc.username}" />
   <property name="password" value="${jdbc.password}" />
</bean>

<bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean" >

	<property name="hibernateProperties">
      <value>hibernate.dialect=${jdbc.hibernate.dialect}</value>
    </property>

   <property name="dataSource" ref="dataSource"/>

   <property name="configLocation">
     <value>${hibernate.config.resource}</value>
   </property>
  
</bean>


	<bean id="daoFactory" class="sernet.gs.ui.rcp.main.service.DAOFactory">
		<property name="propertyListDao" ref="propertyListDao"/>
	  	<property name="entityDao" ref="entityDao"/>
	  	<property name="cnaLinkDao" ref="cnaLinkDao"/>
	  	<property name="finishedRiskAnalysisListsDAO" ref="finishedRiskAnalysisListsDAO"/>
	  	<property name="gefaehrdungDao" ref="gefaehrdungDao"/>
	  	<property name="ownGefaehrdungDao" ref="ownGefaehrdungDao"/>
	  	<property name="configurationDao" ref="configurationDao"/>
	  	<property name="bausteinVorschlagDao" ref="bausteinVorschlagDao"/>
	  	<property name="changeLogEntryDAO" ref="changeLogEntryDAO"/>
		<property name="permissionDAO" ref="personDAO"/>

		<!-- DAOs for subclasses of CnATreeElement: -->	  	
	  	<property name="anwendungDAO" ref="anwendungDAO"/>
	  	<property name="anwendungenKategorieDAO" ref="anwendungenKategorieDAO"/>
		<property name="bausteinUmsetzungDAO" ref="bausteinUmsetzungDAO"/>
		<property name="BSIModelDAO" ref="BSIModelDAO"/>
		<property name="clientDAO" ref="clientDAO"/>
		<property name="clientsKategorieDAO" ref="clientsKategorieDAO"/>
		<property name="datenverarbeitungDAO" ref="datenverarbeitungDAO"/>
		<property name="finishedRiskAnalysisDAO" ref="finishedRiskAnalysisDAO"/>
		<property name="gebaeudeDAO" ref="gebaeudeDAO"/>
		<property name="gebaeudeKategorieDAO" ref="gebaeudeKategorieDAO"/>
		<property name="gefaehrdungsUmsetzungDAO" ref="gefaehrdungsUmsetzungDAO"/>
		<property name="ITVerbundDAO" ref="ITVerbundDAO"/>
		<property name="massnahmenUmsetzungDAO" ref="massnahmenUmsetzungDAO"/>
		<property name="netzKomponenteDAO" ref="netzKomponenteDAO"/>
		<property name="NKKategorieDAO" ref="NKKategorieDAO"/>
		<property name="personDAO" ref="personDAO"/>
		<property name="personengruppenDAO" ref="personengruppenDAO"/>
		<property name="personenKategorieDAO" ref="personenKategorieDAO"/>
		<property name="raeumeKategorieDAO" ref="raeumeKategorieDAO"/>
		<property name="raumDAO" ref="raumDAO"/>
		<property name="serverDAO" ref="serverDAO"/>
		<property name="serverKategorieDAO" ref="serverKategorieDAO"/>
		<property name="sonstigeITKategorieDAO" ref="sonstigeITKategorieDAO"/>
		<property name="sonstITDAO" ref="sonstITDAO"/>
		<property name="stellungnahmeDSBDAO" ref="stellungnahmeDSBDAO"/>
		<property name="telefonKomponenteDAO" ref="telefonKomponenteDAO"/>
		<property name="TKKategorieDAO" ref="TKKategorieDAO"/>
		<property name="verantwortlicheStelleDAO" ref="verantwortlicheStelleDAO"/>
		<property name="verarbeitungsangabenDAO" ref="verarbeitungsangabenDAO"/>
		<property name="zweckbestimmungDAO" ref="zweckbestimmungDAO"/>
		<property name="risikoMassnahmeDAO" ref="risikoMassnahmeDAO"/>
		<property name="risikoMassnahmeUmsetzungDAO" ref="risikoMassnahmeUmsetzungDAO"/>
		<property name="ownGefaehrdungDAO" ref="ownGefaehrdungDAO"/>
	  
  	</bean>
  	
	<bean id="txManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
    <property name="sessionFactory">
        <ref bean="sessionFactory" />
    </property>
</bean>

<bean id="baseTxProxy" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean" 
	abstract="true">
  <property name="transactionManager" ref="txManager"/>
  <property name="transactionAttributes">
    <props>
    	<prop key="get*">PROPAGATION_SUPPORTS,readOnly</prop>
    	<prop key="*">PROPAGATION_REQUIRED</prop>
    </props>
  </property>
</bean>

<bean id="serverExceptionHandler" class="sernet.gs.server.ServerExceptionHandler"/>

<bean id="hibernateCommandService"
	class="sernet.gs.ui.rcp.main.service.HibernateCommandService">
    <property name="daoFactory" ref="daoFactory"/>
    <property name="exceptionHandler" ref="serverExceptionHandler" />
    <property name="authService" ref="authService"/>
</bean>

<bean id="commandService" parent="baseTxProxy">
  <property name="target" ref="hibernateCommandService"/>
  <property name="transactionAttributes">
      <props merge="true">
          <prop key="executeCommand">PROPAGATION_REQUIRED</prop> 
      </props>
  </property>
  
</bean>

</beans>
